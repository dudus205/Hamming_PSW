// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/11/2021 13:46:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Hamming
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Hamming_vlg_sample_tst(
	Clock,
	input,
	reset,
	ReverseBitIndex,
	sampler_tx
);
input  Clock;
input [7:0] input;
input  reset;
input [3:0] ReverseBitIndex;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or input or reset or ReverseBitIndex)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Hamming_vlg_check_tst (
	output,
	ready,
	sent,
	sampler_rx
);
input [7:0] output;
input  ready;
input  sent;
input sampler_rx;

reg [7:0] output_expected;
reg  ready_expected;
reg  sent_expected;

reg [7:0] output_prev;
reg  ready_prev;
reg  sent_prev;

reg [7:0] output_expected_prev;
reg  ready_expected_prev;
reg  sent_expected_prev;

reg [7:0] last_output_exp;
reg  last_ready_exp;
reg  last_sent_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_prev = output;
	ready_prev = ready;
	sent_prev = sent;
end

// update expected /o prevs

always @(trigger)
begin
	output_expected_prev = output_expected;
	ready_expected_prev = ready_expected;
	sent_expected_prev = sent_expected;
end


// expected \output [ 7 ]
initial
begin
	output_expected[7] = 1'bX;
end 
// expected \output [ 6 ]
initial
begin
	output_expected[6] = 1'bX;
end 
// expected \output [ 5 ]
initial
begin
	output_expected[5] = 1'bX;
end 
// expected \output [ 4 ]
initial
begin
	output_expected[4] = 1'bX;
end 
// expected \output [ 3 ]
initial
begin
	output_expected[3] = 1'bX;
end 
// expected \output [ 2 ]
initial
begin
	output_expected[2] = 1'bX;
end 
// expected \output [ 1 ]
initial
begin
	output_expected[1] = 1'bX;
end 
// expected \output [ 0 ]
initial
begin
	output_expected[0] = 1'bX;
end 

// expected ready
initial
begin
	ready_expected = 1'bX;
end 

// expected sent
initial
begin
	sent_expected = 1'bX;
end 
// generate trigger
always @(output_expected or output or ready_expected or ready or sent_expected or sent)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output = %b | expected ready = %b | expected sent = %b | ",output_expected_prev,ready_expected_prev,sent_expected_prev);
	$display("| real output = %b | real ready = %b | real sent = %b | ",output_prev,ready_prev,sent_prev);
`endif
	if (
		( output_expected_prev[0] !== 1'bx ) && ( output_prev[0] !== output_expected_prev[0] )
		&& ((output_expected_prev[0] !== last_output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[0] = output_expected_prev[0];
	end
	if (
		( output_expected_prev[1] !== 1'bx ) && ( output_prev[1] !== output_expected_prev[1] )
		&& ((output_expected_prev[1] !== last_output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[1] = output_expected_prev[1];
	end
	if (
		( output_expected_prev[2] !== 1'bx ) && ( output_prev[2] !== output_expected_prev[2] )
		&& ((output_expected_prev[2] !== last_output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[2] = output_expected_prev[2];
	end
	if (
		( output_expected_prev[3] !== 1'bx ) && ( output_prev[3] !== output_expected_prev[3] )
		&& ((output_expected_prev[3] !== last_output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[3] = output_expected_prev[3];
	end
	if (
		( output_expected_prev[4] !== 1'bx ) && ( output_prev[4] !== output_expected_prev[4] )
		&& ((output_expected_prev[4] !== last_output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[4] = output_expected_prev[4];
	end
	if (
		( output_expected_prev[5] !== 1'bx ) && ( output_prev[5] !== output_expected_prev[5] )
		&& ((output_expected_prev[5] !== last_output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[5] = output_expected_prev[5];
	end
	if (
		( output_expected_prev[6] !== 1'bx ) && ( output_prev[6] !== output_expected_prev[6] )
		&& ((output_expected_prev[6] !== last_output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[6] = output_expected_prev[6];
	end
	if (
		( output_expected_prev[7] !== 1'bx ) && ( output_prev[7] !== output_expected_prev[7] )
		&& ((output_expected_prev[7] !== last_output_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp[7] = output_expected_prev[7];
	end
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end
	if (
		( sent_expected_prev !== 1'bx ) && ( sent_prev !== sent_expected_prev )
		&& ((sent_expected_prev !== last_sent_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sent :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sent_expected_prev);
		$display ("     Real value = %b", sent_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sent_exp = sent_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Hamming_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [7:0] input;
reg reset;
reg [3:0] ReverseBitIndex;
// wires                                               
wire [7:0] output;
wire ready;
wire sent;

wire sampler;                             

// assign statements (if any)                          
Hamming i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.\input (input),
	.\output (output),
	.ready(ready),
	.reset(reset),
	.ReverseBitIndex(ReverseBitIndex),
	.sent(sent)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #25000 1'b1;
	#25000;
end 
// \input [ 7 ]
initial
begin
	input[7] = 1'b1;
end 
// \input [ 6 ]
initial
begin
	input[6] = 1'b0;
end 
// \input [ 5 ]
initial
begin
	input[5] = 1'b1;
end 
// \input [ 4 ]
initial
begin
	input[4] = 1'b0;
end 
// \input [ 3 ]
initial
begin
	input[3] = 1'b1;
end 
// \input [ 2 ]
initial
begin
	input[2] = 1'b0;
end 
// \input [ 1 ]
initial
begin
	input[1] = 1'b1;
end 
// \input [ 0 ]
initial
begin
	input[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #10000 1'b0;
end 
// ReverseBitIndex[ 3 ]
initial
begin
	ReverseBitIndex[3] = 1'b1;
end 
// ReverseBitIndex[ 2 ]
initial
begin
	ReverseBitIndex[2] = 1'b1;
end 
// ReverseBitIndex[ 1 ]
initial
begin
	ReverseBitIndex[1] = 1'b1;
end 
// ReverseBitIndex[ 0 ]
initial
begin
	ReverseBitIndex[0] = 1'b1;
end 

Hamming_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.input(input),
	.reset(reset),
	.ReverseBitIndex(ReverseBitIndex),
	.sampler_tx(sampler)
);

Hamming_vlg_check_tst tb_out(
	.output(output),
	.ready(ready),
	.sent(sent),
	.sampler_rx(sampler)
);
endmodule

